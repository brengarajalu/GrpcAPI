apply plugin: 'application'
apply plugin: 'protobuf'

//apply plugin: 'spring-boot'

description = "grpc Examples"

buildscript {
    repositories {
        mavenCentral()
        //maven { url "http://repo.spring.io/release" }
    }
    dependencies {

        classpath libraries.protobuf_plugin
        //classpath("org.springframework.boot:spring-boot-gradle-plugin:1.1.6.RELEASE")
        
    }
}

dependencies {
    compile project(':grpc-core'),
            project(':grpc-netty'),
            project(':grpc-okhttp'),
            project(':grpc-stub'),
            libraries.jsonp
            //compile("org.springframework.boot:spring-boot-starter-web:1.2.1.RELEASE")
            //testCompile("org.springframework.boot:spring-boot-starter-test")
            //compile("org.scala-lang:scala-library:2.11.4")
            //compile("org.webjars:bootstrap:3.1.1")
}

protobufCodeGenPlugins = ["java_plugin:$javaPluginPath"]
generateProto.dependsOn ':grpc-compiler:java_pluginExecutable'

task routeGuideServer(type: JavaExec) {
    main = "io.grpc.examples.routeguide.RouteGuideServer"
    description = "Executes the route guide server."
    classpath = sourceSets.main.runtimeClasspath
}

task routeGuideClient(type: JavaExec) {
    main = "io.grpc.examples.routeguide.RouteGuideClient"
    description = "Executes the route guide client."
    classpath = sourceSets.main.runtimeClasspath
}

task helloWorldServer(type: JavaExec) {
    main = "io.grpc.examples.helloworld.HelloWorldServer"
    description = "Executes the hello world server."
    classpath = sourceSets.main.runtimeClasspath
}

task helloWorldClient(type: JavaExec) {
    main = "io.grpc.examples.helloworld.HelloWorldClient"
    description = "Executes the hello world client."
    classpath = sourceSets.main.runtimeClasspath
}
task pollServiceServer(type: JavaExec) {
    main = "io.grpc.examples.pollservice.PollServiceServer"
    description = "Executes the pollservice server."
    classpath = sourceSets.main.runtimeClasspath
}

task pollServiceClient(type: JavaExec) {
    main = "io.grpc.examples.pollservice.PollServiceClient"
    description = "Executes the pollservice client."
    classpath = sourceSets.main.runtimeClasspath
}

// Allow intellij projects to refer to generated-sources
idea {
    module {
        // The whole build dir is excluded by default, but we need build/generated-sources,
        // which contains the generated proto classes.
        excludeDirs = [file('.gradle')]
        if (buildDir.exists()) {
            excludeDirs += files(buildDir.listFiles())
            excludeDirs -= file("$buildDir/generated-sources")
        }
    }
}
